package bot

import (
	"context"
	"fmt"
	"log"
	"sync"
	"time"

	"github.com/EgorLis/Rustplusbot/internal/rpclient"
)

type playerDeath struct {
	steamID       uint64
	muState       sync.Mutex
	lastOnline    *bool
	lastAlive     *bool
	lastDeathTime uint32
	lastLogoutAt  time.Time
	callback      func()
}

func (bot *RustPlusBot) StartDeathWatch(every time.Duration) error {
	bot.dwMu.Lock()
	defer bot.dwMu.Unlock()

	if bot.checkPlayerDeath == nil {
		return fmt.Errorf("death-watch: steamID –Ω–µ –∑–∞–¥–∞–Ω (–≤—ã–∑–æ–≤–∏ SetCheckPlayerDeath)")
	}
	if bot.dwRunning {
		// –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ –ª–µ—Ç—É
		bot.dwEvery = every
		return nil
	}

	ctx, cancel := context.WithCancel(context.Background())
	bot.dwCancel = cancel
	bot.dwEvery = every
	bot.dwRunning = true

	go bot.deathPollLoop(ctx) // —Ñ–æ–Ω–æ–≤–∞—è –≥–æ—Ä—É—Ç–∏–Ω–∞
	return nil
}

func (bot *RustPlusBot) StopDeathWatch() {
	bot.dwMu.Lock()
	defer bot.dwMu.Unlock()
	if !bot.dwRunning {
		return
	}
	bot.dwRunning = false
	if bot.dwCancel != nil {
		bot.dwCancel()
		bot.dwCancel = nil
	}
}

func (bot *RustPlusBot) checkDeath(ti *rpclient.AppTeamInfo, say func(string)) {

	log.Println("[death] check death...")

	pd := bot.checkPlayerDeath
	if pd == nil {
		return
	}

	// –Ω–∞–π—Ç–∏ —Å–µ–±—è
	var me *rpclient.AppTeamInfo_Member
	for _, m := range ti.GetMembers() {
		if m.GetSteamId() == pd.steamID {
			me = m
			break
		}
	}
	if me == nil {
		return
	}

	online := me.GetIsOnline()
	alive := me.GetIsAlive()
	dt := me.GetDeathTime()

	pd.muState.Lock()
	defer pd.muState.Unlock()

	// –ø–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	if pd.lastOnline == nil {
		v1, v2 := online, alive
		pd.lastOnline, pd.lastAlive = &v1, &v2
		pd.lastDeathTime = dt
		if !online {
			pd.lastLogoutAt = time.Now()
		}
		//log.Printf("[death] init: online: %t, alive: %t, death time: %d", online, alive, dt)
		return
	}

	//log.Printf("[death] prev: online: %t, alive: %t, death time: %d", *pd.lastOnline, *pd.lastAlive, pd.lastDeathTime)
	//log.Printf("[death] cur: online: %t, alive: %t, death time: %d", online, alive, dt)

	// –æ—Ç–º–µ—Ç–∏–º –º–æ–º–µ–Ω—Ç –≤—ã—Ö–æ–¥–∞ (–º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –≤ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–∫–µ)
	if *pd.lastOnline && !online {
		pd.lastLogoutAt = time.Now()
	}

	// –¥–µ—Ç–µ–∫—Ç —Å–º–µ—Ä—Ç–∏: –ª–∏–±–æ –≤—ã—Ä–æ—Å deathTime, –ª–∏–±–æ —É–ø–∞–ª —Ñ–ª–∞–≥ alive
	death := false
	if *pd.lastAlive && !alive {
		death = true
	}

	if death {
		say("–Ø —É–º–µ—Ä üíÄ")
		if pd.callback != nil {
			go pd.callback()
		}
		// –¥–∞–ª—å—à–µ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º —Ñ–ª–∞–≥–∏ –∏ –≤—ã–π–¥–µ–º
	}

	// —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ (–µ—Å–ª–∏ —Å–º–µ—Ä—Ç–∏ –Ω–µ –±—ã–ª–æ ‚Äî —Ç–æ–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ)
	*pd.lastAlive = alive
	*pd.lastOnline = online
	pd.lastDeathTime = dt
}

// deathPollLoop ‚Äî –∂–∏–≤—ë—Ç –≤—Å—ë –≤—Ä–µ–º—è, –ø–æ–∫–∞ –Ω–µ –≤—ã–∑–æ–≤—É—Ç StopDeathWatch().
func (bot *RustPlusBot) deathPollLoop(ctx context.Context) {
	// –æ–¥–∏–Ω —Ç–∏–∫–µ—Ä ‚Äî –≤–∞—à –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞
	t := time.NewTicker(bot.dwEvery)
	defer t.Stop()

	// —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≤ —Ä–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	var notConnectedBackoff = time.Second
	const maxBackoff = 10 * time.Second

	// —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º —á—Ç–µ–Ω–∏–∏
	initOnce := true

	for {
		select {
		case <-ctx.Done():
			return

		case <-t.C:
			// 1) –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è? –ø—Ä–æ—Å—Ç–æ ¬´—Å–ø–∏–º¬ª –∏ –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∏–∫–∞,
			//    –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π backoff —á—Ç–æ–±—ã –Ω–µ –¥—ë—Ä–≥–∞—Ç—å CPU
			if !bot.rpc.IsConnected() {
				time.Sleep(notConnectedBackoff)
				if notConnectedBackoff < maxBackoff {
					notConnectedBackoff *= 2
					if notConnectedBackoff > maxBackoff {
						notConnectedBackoff = maxBackoff
					}
				}
				continue
			}
			// –µ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ‚Äî —Å–±—Ä–æ—Å–∏–º backoff
			notConnectedBackoff = time.Second

			// 2) –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–µ—Ä–≥–∞–µ–º TeamInfo —Å —Ç–∞–π–º–∞—É—Ç–æ–º; –ø—Ä–∏ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–µ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ ‚Äî –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ
			resp, err := bot.rpc.SendRequestAsync(&rpclient.AppRequest{
				GetTeamInfo: &rpclient.AppEmpty{},
			}, 8*time.Second)
			if err != nil || resp == nil {
				// —Å–µ—Ç—å/—Ç–∞–π–º–∞—É—Ç ‚Äî –º–æ–ª—á–∞ –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫
				continue
			}
			ti := resp.GetTeamInfo()
			if ti == nil {
				continue
			}

			// 3) –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ ‚Äî —Ç–æ–ª—å–∫–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			if initOnce {
				bot.checkDeath(ti, func(string) {})
				initOnce = false
				continue
			}

			// 4) –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: —Å—Ä–∞–≤–Ω–∏—Ç—å —Å–Ω–∞–ø—à–æ—Ç—ã –∏, –µ—Å–ª–∏ –Ω–∞–¥–æ, —Å–æ–æ–±—â–∏—Ç—å
			bot.checkDeath(ti, func(msg string) { _ = bot.rpc.BotSay(msg) })
		}
	}
}
